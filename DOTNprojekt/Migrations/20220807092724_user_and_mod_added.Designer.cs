// <auto-generated />
using System;
using DOTNprojekt.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DOTNprojekt.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220807092724_user_and_mod_added")]
    partial class user_and_mod_added
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DOTNprojekt.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("DOTNprojekt.Models.Mod", b =>
                {
                    b.Property<int>("Mod_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Mod_Id"), 1L, 1);

                    b.Property<string>("Mod_Char")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mod_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mod_cat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Upload_Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("UploaderUser_Id")
                        .HasColumnType("int");

                    b.Property<int>("n_Downloads")
                        .HasColumnType("int");

                    b.Property<int>("n_Views")
                        .HasColumnType("int");

                    b.HasKey("Mod_Id");

                    b.HasIndex("UploaderUser_Id");

                    b.ToTable("Mods");
                });

            modelBuilder.Entity("DOTNprojekt.Models.User", b =>
                {
                    b.Property<int>("User_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("User_Id"), 1L, 1);

                    b.Property<string>("E_Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("n_Uploads")
                        .HasColumnType("int");

                    b.HasKey("User_Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DOTNprojekt.Models.Mod", b =>
                {
                    b.HasOne("DOTNprojekt.Models.User", "Uploader")
                        .WithMany()
                        .HasForeignKey("UploaderUser_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Uploader");
                });
#pragma warning restore 612, 618
        }
    }
}
